ignorePatterns:
  - 'lib'
  - 'node_modules'
  - 'public'
extends:
  - 'eslint:recommended'
  - 'plugin:import/typescript'
env:
  browser: true
  node: true
globals:
  NodeJS: true
  React: true
  JSX: true
parser: '@typescript-eslint/parser'
parserOptions:
  project:
    - './tsconfig.lib.json'
    - './packages/**/tsconfig.json'
plugins:
  - 'react'
  - 'import'
  - 'react-hooks'
  - '@typescript-eslint'
settings:
  react:
    version: 'detect'
rules:
  # https://eslint.org/docs/rules/
  yoda: 'error'
  curly: 'error'
  eqeqeq: 'error'
  no-var: 'error'
  no-void: 'error'
  new-cap: 'error'
  eol-last: 'error'
  no-labels: 'error'
  camelcase: 'error'
  no-console: 'error'
  wrap-regex: 'error'
  new-parens: 'error'
  func-style: 'error'
  key-spacing: 'error'
  no-lonely-if: 'error'
  prefer-const: 'error'
  arrow-spacing: 'error'
  block-spacing: 'error'
  comma-spacing: 'error'
  require-await: 'error'
  no-else-return: 'error'
  spaced-comment: 'error'
  keyword-spacing: 'error'
  prefer-template: 'error'
  no-multi-assign: 'error'
  block-scoped-var: 'error'
  no-extend-native: 'error'
  no-throw-literal: 'error'
  no-nested-ternary: 'error'
  no-param-reassign: 'error'
  no-useless-return: 'error'
  no-mixed-operators: 'error'
  no-inline-comments: 'error'
  no-trailing-spaces: 'error'
  space-before-blocks: 'error'
  no-unreachable-loop: 'error'
  no-unneeded-ternary: 'error'
  rest-spread-spacing: 'error'
  no-duplicate-imports: 'error'
  prefer-destructuring: 'error'
  no-negated-condition: 'error'
  capitalized-comments: 'error'
  prefer-arrow-callback: 'error'
  array-bracket-spacing: 'error'
  require-atomic-updates: 'error'
  template-curly-spacing: 'error'
  no-useless-constructor: 'error'
  no-useless-computed-key: 'error'
  newline-per-chained-call: 'error'
  no-unmodified-loop-condition: 'error'
  prefer-promise-reject-errors: 'error'
  no-unused-private-class-members: 'error'
  semi: ['error', 'never']
  quotes: ['error', 'single']
  max-depth: ['error', { max: 3 }]
  max-params: ['error', { max: 4 }]
  jsx-quotes: ['error', 'prefer-single']
  object-curly-spacing: ['error', 'always']
  max-nested-callbacks: ['error', { max: 2 }]
  no-restricted-imports: ['error', 'prop-types']
  max-len:
    - 'error'
    - { code: 120, ignoreStrings: true }
  lines-between-class-members:
    - 'error'
    - 'always'
    - { exceptAfterSingleLine: true }
  comma-dangle:
    - 'error'
    - { arrays: 'always-multiline', objects: 'always-multiline', exports: 'always-multiline' }
  no-unused-vars:
    - 'error'
    - { argsIgnorePattern: '^_', varsIgnorePattern: '^_' }
  padding-line-between-statements:
    - 'error'
    - { blankLine: 'always', prev: '*', next: [ 'break', 'continue', 'return' ] }
    - { blankLine: 'always', prev: [ 'const', 'let' ], next: '*' }
    - { blankLine: 'any', prev: [ 'const', 'let' ], next: [ 'const', 'let' ] }
    - { blankLine: 'always', prev: 'directive', next: '*' }
    - { blankLine: 'any', prev: 'directive', next: 'directive' }
    - { blankLine: 'always', prev: 'block-like', next: '*' }
    - { blankLine: 'always', prev: '*', next: 'block-like' }

  # https://github.com/yannickcr/eslint-plugin-react
  react/no-unsafe: 'error'
  react/display-name: 'error'
  react/jsx-uses-vars: 'error'
  react/no-deprecated: 'error'
  react/jsx-uses-react: 'error'
  react/react-in-jsx-scope: 'error'
  react/no-direct-mutation-state: 'error'
  react/no-access-state-in-setstate: 'error'
  react/jsx-curly-brace-presence: ['error', 'never']

  # https://github.com/facebook/react/tree/master/packages/eslint-plugin-react-hooks
  react-hooks/rules-of-hooks: 'error'
  react-hooks/exhaustive-deps: 'warn'

  # https://github.com/import-js/eslint-plugin-import#readme
  import/order: 'error'
  import/first: 'error'
  import/no-cycle: 'error'
  import/no-namespace: 'error'
  import/no-deprecated: 'error'
  import/no-duplicates: 'error'
  import/no-unresolved: 'error'
  import/no-self-import: 'error'
  import/no-absolute-path: 'error'
  import/no-unused-modules: 'error'
  import/no-relative-packages: 'error'
  import/newline-after-import: 'error'
  import/no-useless-path-segments: 'error'

# ---------------------------------------------------------------------------------------------------------------------

overrides:
  - files:
    - './packages/hooks/pvm-changelog/src/before/formatters/get-boundary-releases.ts'
    rules:
      # https://eslint.org/docs/rules/
      max-depth: ['error', { max: 5 }]
      max-nested-callbacks: ['error', { max: 3 }]
# --------
  - files:
    - './packages/**/src/**/*.ts'
    rules:
      # https://github.com/import-js/eslint-plugin-import#readme
      import/extensions: 'error'
      import/no-extraneous-dependencies: 'error'

      # https://www.npmjs.com/package/@typescript-eslint/eslint-plugin
      '@typescript-eslint/adjacent-overload-signatures': 'error'
      '@typescript-eslint/await-thenable': 'error'
      '@typescript-eslint/consistent-type-assertions': 'error'
      '@typescript-eslint/explicit-function-return-type': 'error'
      '@typescript-eslint/member-delimiter-style': 'error'
  # --------
  - files:
    - './packages/hooks/pvm-changelog/components/changelog.jsx'
    rules:
      # https://github.com/import-js/eslint-plugin-import#readme
      import/extensions: 'off'
      import/no-unresolved: 'off'
